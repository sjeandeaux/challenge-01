plugins {
    id 'scala'
    id 'maven-publish'
}

group = 'com.challenge'
version = '0.0.0-SNAPSHOT'
sourceCompatibility = '1.8'

//create a single Jar with all dependencies
task fatJar(type: Jar) {
    zip64 true


    baseName = project.name + '-all'
    from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
    with jar

    exclude "META-INF/*.SF"
    exclude "META-INF/*.DSA"
    exclude "META-INF/*.RSA"

    manifest {
        attributes 'Implementation-Title': 'Gradle Jar File Example',
                'Implementation-Version': version,
                'Main-Class': 'com.challenge.matching.MatchingAggregatorApp'
    }
}


repositories {
    mavenLocal()
    maven {
        url = 'http://repo.maven.apache.org/maven2'
    }
}

sourceSets {
    itest {
        scala {
            compileClasspath += sourceSets.main.output + configurations.testRuntimeClasspath
            runtimeClasspath += output + compileClasspath
            srcDir file('src/integration-test/scala')
        }
        resources.srcDir file('src/integration-test/resources')
    }
}

dependencies {
    implementation 'org.scala-lang:scala-library:2.11.12'
    testImplementation 'org.scalatest:scalatest_2.11:3.0.1'
    testImplementation 'junit:junit:4.12'
    compile 'org.apache.spark:spark-core_2.11:2.4.3'
    compile 'org.apache.spark:spark-sql_2.11:2.4.3'
    compile 'org.apache.spark:spark-streaming_2.11:2.4.3'
    compile 'org.apache.spark:spark-streaming-kafka-0-10_2.11:2.4.3'
    compile 'org.apache.kafka:kafka_2.11:2.3.0'
    compile 'org.apache.zookeeper:zookeeper:3.5.5'
    compile 'org.slf4j:slf4j-log4j12:1.7.25'
    compile 'log4j:log4j:1.2.17'
    compile 'org.slf4j:slf4j-api:1.7.25'
    compile 'org.datasyslab:geospark:1.2.0'
    compile 'org.datasyslab:geospark-sql_2.3:1.2.0'
    compile 'com.typesafe:config:1.3.2'
    compile 'org.mongodb:mongo-java-driver:3.10.2'
    compile 'org.mongodb.spark:mongo-spark-connector_2.11:2.4.1'
    testCompile 'org.scalatest:scalatest_2.11:3.0.1'


    itestCompile sourceSets.main.output
    itestCompile sourceSets.test.output

    itestCompile configurations.compile
    itestCompile configurations.testCompile

    itestRuntime configurations.runtime
    itestRuntime configurations.testRuntime
}

publishing {
    publications {
        maven(MavenPublication) {
            from(components.java)
        }
    }
}

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}


configurations {
    itestCompile.extendsFrom testCompile
    itestRuntime.extendsFrom testRuntime
}

task itest(type: Test) {
    description = 'Runs the integration tests.'
    group = 'verification'
    testClassesDirs = sourceSets.itest.output.classesDirs
    classpath = sourceSets.itest.runtimeClasspath
    mustRunAfter test

    testLogging {
        showStandardStreams = true
    }
}

check.dependsOn itest